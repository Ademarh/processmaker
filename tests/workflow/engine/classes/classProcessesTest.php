<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php' ;
  require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php' ;
  require_once PATH_TRUNK . 'workflow/engine/classes/class.processes.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:56:11.
  */ 

  class classProcessesTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers Processes::changeStatus
    * @todo   Implement testchangeStatus().
    */
    public function testchangeStatus() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'changeStatus', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::changeDebugMode
    * @todo   Implement testchangeDebugMode().
    */
    public function testchangeDebugMode() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'changeDebugMode', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::changeProcessParent
    * @todo   Implement testchangeProcessParent().
    */
    public function testchangeProcessParent() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'changeProcessParent', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::processExists
    * @todo   Implement testprocessExists().
    */
    public function testprocessExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'processExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedProcessGUID
    * @todo   Implement testgetUnusedProcessGUID().
    */
    public function testgetUnusedProcessGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedProcessGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::taskExists
    * @todo   Implement testtaskExists().
    */
    public function testtaskExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'taskExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedTaskGUID
    * @todo   Implement testgetUnusedTaskGUID().
    */
    public function testgetUnusedTaskGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedTaskGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::dynaformExists
    * @todo   Implement testdynaformExists().
    */
    public function testdynaformExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'dynaformExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::inputExists
    * @todo   Implement testinputExists().
    */
    public function testinputExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'inputExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::outputExists
    * @todo   Implement testoutputExists().
    */
    public function testoutputExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'outputExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::triggerExists
    * @todo   Implement testtriggerExists().
    */
    public function testtriggerExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'triggerExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::SubProcessExists
    * @todo   Implement testSubProcessExists().
    */
    public function testSubProcessExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'SubProcessExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::caseTrackerObjectExists
    * @todo   Implement testcaseTrackerObjectExists().
    */
    public function testcaseTrackerObjectExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'caseTrackerObjectExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::caseTrackerExists
    * @todo   Implement testcaseTrackerExists().
    */
    public function testcaseTrackerExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'caseTrackerExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::dbConnectionExists
    * @todo   Implement testdbConnectionExists().
    */
    public function testdbConnectionExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'dbConnectionExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::objectPermissionExists
    * @todo   Implement testobjectPermissionExists().
    */
    public function testobjectPermissionExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'objectPermissionExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::routeExists
    * @todo   Implement testrouteExists().
    */
    public function testrouteExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'routeExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::stageExists
    * @todo   Implement teststageExists().
    */
    public function teststageExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'stageExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::slExists
    * @todo   Implement testslExists().
    */
    public function testslExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'slExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::reportTableExists
    * @todo   Implement testreportTableExists().
    */
    public function testreportTableExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'reportTableExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::reportVarExists
    * @todo   Implement testreportVarExists().
    */
    public function testreportVarExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'reportVarExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::fieldsConditionsExists
    * @todo   Implement testfieldsConditionsExists().
    */
    public function testfieldsConditionsExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'fieldsConditionsExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::eventExists
    * @todo   Implement testeventExists().
    */
    public function testeventExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'eventExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::caseSchedulerExists
    * @todo   Implement testcaseSchedulerExists().
    */
    public function testcaseSchedulerExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'caseSchedulerExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedInputGUID
    * @todo   Implement testgetUnusedInputGUID().
    */
    public function testgetUnusedInputGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedInputGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedOutputGUID
    * @todo   Implement testgetUnusedOutputGUID().
    */
    public function testgetUnusedOutputGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedOutputGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedTriggerGUID
    * @todo   Implement testgetUnusedTriggerGUID().
    */
    public function testgetUnusedTriggerGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedTriggerGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedSubProcessGUID
    * @todo   Implement testgetUnusedSubProcessGUID().
    */
    public function testgetUnusedSubProcessGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedSubProcessGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedCaseTrackerObjectGUID
    * @todo   Implement testgetUnusedCaseTrackerObjectGUID().
    */
    public function testgetUnusedCaseTrackerObjectGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedCaseTrackerObjectGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedDBSourceGUID
    * @todo   Implement testgetUnusedDBSourceGUID().
    */
    public function testgetUnusedDBSourceGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedDBSourceGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedObjectPermissionGUID
    * @todo   Implement testgetUnusedObjectPermissionGUID().
    */
    public function testgetUnusedObjectPermissionGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedObjectPermissionGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedRouteGUID
    * @todo   Implement testgetUnusedRouteGUID().
    */
    public function testgetUnusedRouteGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedRouteGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedStageGUID
    * @todo   Implement testgetUnusedStageGUID().
    */
    public function testgetUnusedStageGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedStageGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedSLGUID
    * @todo   Implement testgetUnusedSLGUID().
    */
    public function testgetUnusedSLGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedSLGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedRTGUID
    * @todo   Implement testgetUnusedRTGUID().
    */
    public function testgetUnusedRTGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedRTGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedRTVGUID
    * @todo   Implement testgetUnusedRTVGUID().
    */
    public function testgetUnusedRTVGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedRTVGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::stepExists
    * @todo   Implement teststepExists().
    */
    public function teststepExists() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'stepExists', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedStepGUID
    * @todo   Implement testgetUnusedStepGUID().
    */
    public function testgetUnusedStepGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedStepGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedDynaformGUID
    * @todo   Implement testgetUnusedDynaformGUID().
    */
    public function testgetUnusedDynaformGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedDynaformGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedFieldConditionGUID
    * @todo   Implement testgetUnusedFieldConditionGUID().
    */
    public function testgetUnusedFieldConditionGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedFieldConditionGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedEventGUID
    * @todo   Implement testgetUnusedEventGUID().
    */
    public function testgetUnusedEventGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedEventGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getUnusedCaseSchedulerGUID
    * @todo   Implement testgetUnusedCaseSchedulerGUID().
    */
    public function testgetUnusedCaseSchedulerGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getUnusedCaseSchedulerGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::setProcessGUID
    * @todo   Implement testsetProcessGUID().
    */
    public function testsetProcessGUID() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'setProcessGUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::setProcessParent
    * @todo   Implement testsetProcessParent().
    */
    public function testsetProcessParent() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'setProcessParent', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllTaskGuid
    * @todo   Implement testrenewAllTaskGuid().
    */
    public function testrenewAllTaskGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllTaskGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllDynaformGuid
    * @todo   Implement testrenewAllDynaformGuid().
    */
    public function testrenewAllDynaformGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllDynaformGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getProcessRow
    * @todo   Implement testgetProcessRow().
    */
    public function testgetProcessRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getProcessRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createProcessRow
    * @todo   Implement testcreateProcessRow().
    */
    public function testcreateProcessRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createProcessRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::updateProcessRow
    * @todo   Implement testupdateProcessRow().
    */
    public function testupdateProcessRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'updateProcessRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getSubProcessRow
    * @todo   Implement testgetSubProcessRow().
    */
    public function testgetSubProcessRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getSubProcessRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getCaseTrackerRow
    * @todo   Implement testgetCaseTrackerRow().
    */
    public function testgetCaseTrackerRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getCaseTrackerRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getCaseTrackerObjectRow
    * @todo   Implement testgetCaseTrackerObjectRow().
    */
    public function testgetCaseTrackerObjectRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getCaseTrackerObjectRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getStageRow
    * @todo   Implement testgetStageRow().
    */
    public function testgetStageRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getStageRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getFieldCondition
    * @todo   Implement testgetFieldCondition().
    */
    public function testgetFieldCondition() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getFieldCondition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getEventRow
    * @todo   Implement testgetEventRow().
    */
    public function testgetEventRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getEventRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getCaseSchedulerRow
    * @todo   Implement testgetCaseSchedulerRow().
    */
    public function testgetCaseSchedulerRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getCaseSchedulerRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getProcessCategoryRow
    * @todo   Implement testgetProcessCategoryRow().
    */
    public function testgetProcessCategoryRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getProcessCategoryRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getAllLanes
    * @todo   Implement testgetAllLanes().
    */
    public function testgetAllLanes() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getAllLanes', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getTaskRows
    * @todo   Implement testgetTaskRows().
    */
    public function testgetTaskRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getTaskRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createTaskRows
    * @todo   Implement testcreateTaskRows().
    */
    public function testcreateTaskRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createTaskRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::updateTaskRows
    * @todo   Implement testupdateTaskRows().
    */
    public function testupdateTaskRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'updateTaskRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getRouteRows
    * @todo   Implement testgetRouteRows().
    */
    public function testgetRouteRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getRouteRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createRouteRows
    * @todo   Implement testcreateRouteRows().
    */
    public function testcreateRouteRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createRouteRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::updateRouteRows
    * @todo   Implement testupdateRouteRows().
    */
    public function testupdateRouteRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'updateRouteRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getLaneRows
    * @todo   Implement testgetLaneRows().
    */
    public function testgetLaneRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getLaneRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getGatewayRows
    * @todo   Implement testgetGatewayRows().
    */
    public function testgetGatewayRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getGatewayRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createGatewayRows
    * @todo   Implement testcreateGatewayRows().
    */
    public function testcreateGatewayRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createGatewayRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createLaneRows
    * @todo   Implement testcreateLaneRows().
    */
    public function testcreateLaneRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createLaneRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createSubProcessRows
    * @todo   Implement testcreateSubProcessRows().
    */
    public function testcreateSubProcessRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createSubProcessRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createCaseTrackerRows
    * @todo   Implement testcreateCaseTrackerRows().
    */
    public function testcreateCaseTrackerRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createCaseTrackerRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createCaseTrackerObjectRows
    * @todo   Implement testcreateCaseTrackerObjectRows().
    */
    public function testcreateCaseTrackerObjectRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createCaseTrackerObjectRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createObjectPermissionsRows
    * @todo   Implement testcreateObjectPermissionsRows().
    */
    public function testcreateObjectPermissionsRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createObjectPermissionsRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createStageRows
    * @todo   Implement testcreateStageRows().
    */
    public function testcreateStageRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createStageRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createFieldCondition
    * @todo   Implement testcreateFieldCondition().
    */
    public function testcreateFieldCondition() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createFieldCondition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createEventRows
    * @todo   Implement testcreateEventRows().
    */
    public function testcreateEventRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createEventRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createCaseSchedulerRows
    * @todo   Implement testcreateCaseSchedulerRows().
    */
    public function testcreateCaseSchedulerRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createCaseSchedulerRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createProcessCategoryRow
    * @todo   Implement testcreateProcessCategoryRow().
    */
    public function testcreateProcessCategoryRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createProcessCategoryRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getInputRows
    * @todo   Implement testgetInputRows().
    */
    public function testgetInputRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getInputRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createInputRows
    * @todo   Implement testcreateInputRows().
    */
    public function testcreateInputRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createInputRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllInputGuid
    * @todo   Implement testrenewAllInputGuid().
    */
    public function testrenewAllInputGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllInputGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getOutputRows
    * @todo   Implement testgetOutputRows().
    */
    public function testgetOutputRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getOutputRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createOutputRows
    * @todo   Implement testcreateOutputRows().
    */
    public function testcreateOutputRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createOutputRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllOutputGuid
    * @todo   Implement testrenewAllOutputGuid().
    */
    public function testrenewAllOutputGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllOutputGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllTriggerGuid
    * @todo   Implement testrenewAllTriggerGuid().
    */
    public function testrenewAllTriggerGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllTriggerGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllSubProcessGuid
    * @todo   Implement testrenewAllSubProcessGuid().
    */
    public function testrenewAllSubProcessGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllSubProcessGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllCaseTrackerObjectGuid
    * @todo   Implement testrenewAllCaseTrackerObjectGuid().
    */
    public function testrenewAllCaseTrackerObjectGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllCaseTrackerObjectGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllDBSourceGuid
    * @todo   Implement testrenewAllDBSourceGuid().
    */
    public function testrenewAllDBSourceGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllDBSourceGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllObjectPermissionGuid
    * @todo   Implement testrenewAllObjectPermissionGuid().
    */
    public function testrenewAllObjectPermissionGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllObjectPermissionGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllRouteGuid
    * @todo   Implement testrenewAllRouteGuid().
    */
    public function testrenewAllRouteGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllRouteGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllStageGuid
    * @todo   Implement testrenewAllStageGuid().
    */
    public function testrenewAllStageGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllStageGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllSwimlanesElementsGuid
    * @todo   Implement testrenewAllSwimlanesElementsGuid().
    */
    public function testrenewAllSwimlanesElementsGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllSwimlanesElementsGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllReportTableGuid
    * @todo   Implement testrenewAllReportTableGuid().
    */
    public function testrenewAllReportTableGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllReportTableGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllReportVarGuid
    * @todo   Implement testrenewAllReportVarGuid().
    */
    public function testrenewAllReportVarGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllReportVarGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllFieldCondition
    * @todo   Implement testrenewAllFieldCondition().
    */
    public function testrenewAllFieldCondition() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllFieldCondition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllEvent
    * @todo   Implement testrenewAllEvent().
    */
    public function testrenewAllEvent() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllEvent', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllCaseScheduler
    * @todo   Implement testrenewAllCaseScheduler().
    */
    public function testrenewAllCaseScheduler() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllCaseScheduler', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAll
    * @todo   Implement testrenewAll().
    */
    public function testrenewAll() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAll', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getStepRows
    * @todo   Implement testgetStepRows().
    */
    public function testgetStepRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getStepRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createStepRows
    * @todo   Implement testcreateStepRows().
    */
    public function testcreateStepRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createStepRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createStepSupervisorRows
    * @todo   Implement testcreateStepSupervisorRows().
    */
    public function testcreateStepSupervisorRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createStepSupervisorRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renewAllStepGuid
    * @todo   Implement testrenewAllStepGuid().
    */
    public function testrenewAllStepGuid() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renewAllStepGuid', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getDynaformRows
    * @todo   Implement testgetDynaformRows().
    */
    public function testgetDynaformRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getDynaformRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getObjectPermissionRows
    * @todo   Implement testgetObjectPermissionRows().
    */
    public function testgetObjectPermissionRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getObjectPermissionRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createDynaformRows
    * @todo   Implement testcreateDynaformRows().
    */
    public function testcreateDynaformRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createDynaformRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createStepTriggerRows
    * @todo   Implement testcreateStepTriggerRows().
    */
    public function testcreateStepTriggerRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createStepTriggerRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getStepTriggerRows
    * @todo   Implement testgetStepTriggerRows().
    */
    public function testgetStepTriggerRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getStepTriggerRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getTriggerRows
    * @todo   Implement testgetTriggerRows().
    */
    public function testgetTriggerRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getTriggerRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createTriggerRows
    * @todo   Implement testcreateTriggerRows().
    */
    public function testcreateTriggerRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createTriggerRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getGroupwfRows
    * @todo   Implement testgetGroupwfRows().
    */
    public function testgetGroupwfRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getGroupwfRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getDBConnectionsRows
    * @todo   Implement testgetDBConnectionsRows().
    */
    public function testgetDBConnectionsRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getDBConnectionsRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getStepSupervisorRows
    * @todo   Implement testgetStepSupervisorRows().
    */
    public function testgetStepSupervisorRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getStepSupervisorRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getReportTablesRows
    * @todo   Implement testgetReportTablesRows().
    */
    public function testgetReportTablesRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getReportTablesRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getReportTablesVarsRows
    * @todo   Implement testgetReportTablesVarsRows().
    */
    public function testgetReportTablesVarsRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getReportTablesVarsRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getTaskUserRows
    * @todo   Implement testgetTaskUserRows().
    */
    public function testgetTaskUserRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getTaskUserRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createTaskUserRows
    * @todo   Implement testcreateTaskUserRows().
    */
    public function testcreateTaskUserRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createTaskUserRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createGroupRow
    * @todo   Implement testcreateGroupRow().
    */
    public function testcreateGroupRow() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createGroupRow', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createDBConnectionsRows
    * @todo   Implement testcreateDBConnectionsRows().
    */
    public function testcreateDBConnectionsRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createDBConnectionsRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createReportTables
    * @todo   Implement testcreateReportTables().
    */
    public function testcreateReportTables() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createReportTables', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::updateReportTables
    * @todo   Implement testupdateReportTables().
    */
    public function testupdateReportTables() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'updateReportTables', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createReportTablesVars
    * @todo   Implement testcreateReportTablesVars().
    */
    public function testcreateReportTablesVars() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createReportTablesVars', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::cleanupReportTablesReferences
    * @todo   Implement testcleanupReportTablesReferences().
    */
    public function testcleanupReportTablesReferences() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'cleanupReportTablesReferences', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::serializeProcess
    * @todo   Implement testserializeProcess().
    */
    public function testserializeProcess() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'serializeProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::saveSerializedProcess
    * @todo   Implement testsaveSerializedProcess().
    */
    public function testsaveSerializedProcess() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'saveSerializedProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getProcessData
    * @todo   Implement testgetProcessData().
    */
    public function testgetProcessData() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getProcessData', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::checkExistingGroups
    * @todo   Implement testcheckExistingGroups().
    */
    public function testcheckExistingGroups() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'checkExistingGroups', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::renameExistingGroups
    * @todo   Implement testrenameExistingGroups().
    */
    public function testrenameExistingGroups() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'renameExistingGroups', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::mergeExistingGroups
    * @todo   Implement testmergeExistingGroups().
    */
    public function testmergeExistingGroups() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'mergeExistingGroups', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::mergeExistingUsers
    * @todo   Implement testmergeExistingUsers().
    */
    public function testmergeExistingUsers() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'mergeExistingUsers', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::disablePreviousProcesses
    * @todo   Implement testdisablePreviousProcesses().
    */
    public function testdisablePreviousProcesses() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'disablePreviousProcesses', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createFiles
    * @todo   Implement testcreateFiles().
    */
    public function testcreateFiles() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createFiles', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::removeProcessRows
    * @todo   Implement testremoveProcessRows().
    */
    public function testremoveProcessRows() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'removeProcessRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::createProcessFromData
    * @todo   Implement testcreateProcessFromData().
    */
    public function testcreateProcessFromData() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'createProcessFromData', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::updateProcessFromData
    * @todo   Implement testupdateProcessFromData().
    */
    public function testupdateProcessFromData() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'updateProcessFromData', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getStartingTaskForUser
    * @todo   Implement testgetStartingTaskForUser().
    */
    public function testgetStartingTaskForUser() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getStartingTaskForUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::ws_open
    * @todo   Implement testws_open().
    */
    public function testws_open() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'ws_open', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::ws_open_public
    * @todo   Implement testws_open_public().
    */
    public function testws_open_public() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'ws_open_public', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::ws_processList
    * @todo   Implement testws_processList().
    */
    public function testws_processList() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'ws_processList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::downloadFile
    * @todo   Implement testdownloadFile().
    */
    public function testdownloadFile() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'downloadFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::ws_processGetData
    * @todo   Implement testws_processGetData().
    */
    public function testws_processGetData() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'ws_processGetData', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::parseItemArray
    * @todo   Implement testparseItemArray().
    */
    public function testparseItemArray() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'parseItemArray', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Processes::getProcessFiles
    * @todo   Implement testgetProcessFiles().
    */
    public function testgetProcessFiles() 
    { 
        if (class_exists('Processes')) {
             $methods = get_class_methods( 'Processes');
            $this->assertTrue( in_array( 'getProcessFiles', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
