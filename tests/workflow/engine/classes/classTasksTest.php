<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php' ;
  require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php' ;
  require_once PATH_TRUNK . 'workflow/engine/classes/class.tasks.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:56:12.
  */ 

  class classTasksTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers Tasks::getGroupsOfTask
    * @todo   Implement testgetGroupsOfTask().
    */
    public function testgetGroupsOfTask() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getGroupsOfTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getAllTasks
    * @todo   Implement testgetAllTasks().
    */
    public function testgetAllTasks() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getAllTasks', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::createTaskRows
    * @todo   Implement testcreateTaskRows().
    */
    public function testcreateTaskRows() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'createTaskRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::updateTaskRows
    * @todo   Implement testupdateTaskRows().
    */
    public function testupdateTaskRows() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'updateTaskRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getAllRoutes
    * @todo   Implement testgetAllRoutes().
    */
    public function testgetAllRoutes() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getAllRoutes', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::createRouteRows
    * @todo   Implement testcreateRouteRows().
    */
    public function testcreateRouteRows() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'createRouteRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::updateRouteRows
    * @todo   Implement testupdateRouteRows().
    */
    public function testupdateRouteRows() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'updateRouteRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getUsersOfTask
    * @todo   Implement testgetUsersOfTask().
    */
    public function testgetUsersOfTask() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getUsersOfTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::deleteTask
    * @todo   Implement testdeleteTask().
    */
    public function testdeleteTask() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'deleteTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::deleteAllRoutesOfTask
    * @todo   Implement testdeleteAllRoutesOfTask().
    */
    public function testdeleteAllRoutesOfTask() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'deleteAllRoutesOfTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getAllGateways
    * @todo   Implement testgetAllGateways().
    */
    public function testgetAllGateways() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getAllGateways', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::createGatewayRows
    * @todo   Implement testcreateGatewayRows().
    */
    public function testcreateGatewayRows() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'createGatewayRows', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::deleteAllGatewayOfTask
    * @todo   Implement testdeleteAllGatewayOfTask().
    */
    public function testdeleteAllGatewayOfTask() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'deleteAllGatewayOfTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::assignUser
    * @todo   Implement testassignUser().
    */
    public function testassignUser() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'assignUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::assignGroup
    * @todo   Implement testassignGroup().
    */
    public function testassignGroup() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'assignGroup', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::ofToAssignUserOfAllTasks
    * @todo   Implement testofToAssignUserOfAllTasks().
    */
    public function testofToAssignUserOfAllTasks() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'ofToAssignUserOfAllTasks', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::ofToAssignUser
    * @todo   Implement testofToAssignUser().
    */
    public function testofToAssignUser() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'ofToAssignUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::ofToAssignGroup
    * @todo   Implement testofToAssignGroup().
    */
    public function testofToAssignGroup() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'ofToAssignGroup', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getStepsOfTask
    * @todo   Implement testgetStepsOfTask().
    */
    public function testgetStepsOfTask() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getStepsOfTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::existsBuildingElements
    * @todo   Implement testexistsBuildingElements().
    */
    public function testexistsBuildingElements() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'existsBuildingElements', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getStartingTaskForUser
    * @todo   Implement testgetStartingTaskForUser().
    */
    public function testgetStartingTaskForUser() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getStartingTaskForUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::assignUsertoTask
    * @todo   Implement testassignUsertoTask().
    */
    public function testassignUsertoTask() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'assignUsertoTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::verifyUsertoTask
    * @todo   Implement testverifyUsertoTask().
    */
    public function testverifyUsertoTask() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'verifyUsertoTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getTasksThatUserIsAssigned
    * @todo   Implement testgetTasksThatUserIsAssigned().
    */
    public function testgetTasksThatUserIsAssigned() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getTasksThatUserIsAssigned', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getRoute
    * @todo   Implement testgetRoute().
    */
    public function testgetRoute() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getRoute', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Tasks::getRouteByType
    * @todo   Implement testgetRouteByType().
    */
    public function testgetRouteByType() 
    { 
        if (class_exists('Tasks')) {
             $methods = get_class_methods( 'Tasks');
            $this->assertTrue( in_array( 'getRouteByType', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
