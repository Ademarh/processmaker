<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php' ;
  require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php' ;
  require_once PATH_TRUNK . 'workflow/engine/classes/class.pmScript.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:56:18.
  */ 

  class classPMScriptTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers PMScript::PMScript
    * @todo   Implement testPMScript().
    */
    public function testPMScript() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'PMScript', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::setFields
    * @todo   Implement testsetFields().
    */
    public function testsetFields() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'setFields', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::setScript
    * @todo   Implement testsetScript().
    */
    public function testsetScript() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'setScript', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::validSyntax
    * @todo   Implement testvalidSyntax().
    */
    public function testvalidSyntax() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'validSyntax', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::executeAndCatchErrors
    * @todo   Implement testexecuteAndCatchErrors().
    */
    public function testexecuteAndCatchErrors() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'executeAndCatchErrors', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::execute
    * @todo   Implement testexecute().
    */
    public function testexecute() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'execute', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::evaluate
    * @todo   Implement testevaluate().
    */
    public function testevaluate() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'evaluate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::pmToString
    * @todo   Implement testpmToString().
    */
    public function testpmToString() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'pmToString', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::pmToInteger
    * @todo   Implement testpmToInteger().
    */
    public function testpmToInteger() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'pmToInteger', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::pmToFloat
    * @todo   Implement testpmToFloat().
    */
    public function testpmToFloat() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'pmToFloat', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::pmToUrl
    * @todo   Implement testpmToUrl().
    */
    public function testpmToUrl() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'pmToUrl', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::pmSqlEscape
    * @todo   Implement testpmSqlEscape().
    */
    public function testpmSqlEscape() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'pmSqlEscape', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::handleErrors
    * @todo   Implement testhandleErrors().
    */
    public function testhandleErrors() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'handleErrors', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::handleFatalErrors
    * @todo   Implement testhandleFatalErrors().
    */
    public function testhandleFatalErrors() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'handleFatalErrors', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers PMScript::registerError
    * @todo   Implement testregisterError().
    */
    public function testregisterError() 
    { 
        if (class_exists('PMScript')) {
             $methods = get_class_methods( 'PMScript');
            $this->assertTrue( in_array( 'registerError', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
