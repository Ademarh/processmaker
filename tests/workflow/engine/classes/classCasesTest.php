<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php' ;
  require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php' ;
  require_once PATH_TRUNK . 'workflow/engine/classes/class.case.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:56:12.
  */ 

  class classCasesTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers Cases::canStartCase
    * @todo   Implement testcanStartCase().
    */
    public function testcanStartCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'canStartCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getStartCases
    * @todo   Implement testgetStartCases().
    */
    public function testgetStartCases() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getStartCases', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getStartCasesPerType
    * @todo   Implement testgetStartCasesPerType().
    */
    public function testgetStartCasesPerType() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getStartCasesPerType', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getSelfServiceTasks
    * @todo   Implement testgetSelfServiceTasks().
    */
    public function testgetSelfServiceTasks() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getSelfServiceTasks', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::isSelfService
    * @todo   Implement testisSelfService().
    */
    public function testisSelfService() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'isSelfService', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::loadCase
    * @todo   Implement testloadCase().
    */
    public function testloadCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'loadCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::loadCaseByNumber
    * @todo   Implement testloadCaseByNumber().
    */
    public function testloadCaseByNumber() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'loadCaseByNumber', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::refreshCaseLabel
    * @todo   Implement testrefreshCaseLabel().
    */
    public function testrefreshCaseLabel() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'refreshCaseLabel', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::refreshCaseTitleAndDescription
    * @todo   Implement testrefreshCaseTitleAndDescription().
    */
    public function testrefreshCaseTitleAndDescription() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'refreshCaseTitleAndDescription', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::newRefreshCaseTitleAndDescription
    * @todo   Implement testnewRefreshCaseTitleAndDescription().
    */
    public function testnewRefreshCaseTitleAndDescription() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'newRefreshCaseTitleAndDescription', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::refreshCaseTitle
    * @todo   Implement testrefreshCaseTitle().
    */
    public function testrefreshCaseTitle() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'refreshCaseTitle', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::refreshCaseDescription
    * @todo   Implement testrefreshCaseDescription().
    */
    public function testrefreshCaseDescription() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'refreshCaseDescription', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::refreshCaseStatusCode
    * @todo   Implement testrefreshCaseStatusCode().
    */
    public function testrefreshCaseStatusCode() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'refreshCaseStatusCode', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::arrayRecursiveDiff
    * @todo   Implement testarrayRecursiveDiff().
    */
    public function testarrayRecursiveDiff() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'arrayRecursiveDiff', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::updateCase
    * @todo   Implement testupdateCase().
    */
    public function testupdateCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'updateCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::removeCase
    * @todo   Implement testremoveCase().
    */
    public function testremoveCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'removeCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::setDelInitDate
    * @todo   Implement testsetDelInitDate().
    */
    public function testsetDelInitDate() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'setDelInitDate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::setCatchUser
    * @todo   Implement testsetCatchUser().
    */
    public function testsetCatchUser() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'setCatchUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::GetOpenThreads
    * @todo   Implement testGetOpenThreads().
    */
    public function testGetOpenThreads() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'GetOpenThreads', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getSiblingThreads
    * @todo   Implement testgetSiblingThreads().
    */
    public function testgetSiblingThreads() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getSiblingThreads', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getOpenSiblingThreads
    * @todo   Implement testgetOpenSiblingThreads().
    */
    public function testgetOpenSiblingThreads() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getOpenSiblingThreads', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::searchOpenPreviousTasks
    * @todo   Implement testsearchOpenPreviousTasks().
    */
    public function testsearchOpenPreviousTasks() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'searchOpenPreviousTasks', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getReviewedTasks
    * @todo   Implement testgetReviewedTasks().
    */
    public function testgetReviewedTasks() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getReviewedTasks', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::CountTotalPreviousTasks
    * @todo   Implement testCountTotalPreviousTasks().
    */
    public function testCountTotalPreviousTasks() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'CountTotalPreviousTasks', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getOpenNullDelegations
    * @todo   Implement testgetOpenNullDelegations().
    */
    public function testgetOpenNullDelegations() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getOpenNullDelegations', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::isRouteOpen
    * @todo   Implement testisRouteOpen().
    */
    public function testisRouteOpen() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'isRouteOpen', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::newAppDelegation
    * @todo   Implement testnewAppDelegation().
    */
    public function testnewAppDelegation() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'newAppDelegation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::updateAppDelegation
    * @todo   Implement testupdateAppDelegation().
    */
    public function testupdateAppDelegation() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'updateAppDelegation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::GetAllDelegations
    * @todo   Implement testGetAllDelegations().
    */
    public function testGetAllDelegations() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'GetAllDelegations', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::GetAllThreads
    * @todo   Implement testGetAllThreads().
    */
    public function testGetAllThreads() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'GetAllThreads', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::updateAppThread
    * @todo   Implement testupdateAppThread().
    */
    public function testupdateAppThread() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'updateAppThread', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::closeAppThread
    * @todo   Implement testcloseAppThread().
    */
    public function testcloseAppThread() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'closeAppThread', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::closeAllThreads
    * @todo   Implement testcloseAllThreads().
    */
    public function testcloseAllThreads() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'closeAllThreads', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::newAppThread
    * @todo   Implement testnewAppThread().
    */
    public function testnewAppThread() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'newAppThread', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::closeAllDelegations
    * @todo   Implement testcloseAllDelegations().
    */
    public function testcloseAllDelegations() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'closeAllDelegations', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::CloseCurrentDelegation
    * @todo   Implement testCloseCurrentDelegation().
    */
    public function testCloseCurrentDelegation() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'CloseCurrentDelegation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::ReactivateCurrentDelegation
    * @todo   Implement testReactivateCurrentDelegation().
    */
    public function testReactivateCurrentDelegation() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'ReactivateCurrentDelegation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::startCase
    * @todo   Implement teststartCase().
    */
    public function teststartCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'startCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getNextStep
    * @todo   Implement testgetNextStep().
    */
    public function testgetNextStep() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getNextStep', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getPreviousStep
    * @todo   Implement testgetPreviousStep().
    */
    public function testgetPreviousStep() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getPreviousStep', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getNextSupervisorStep
    * @todo   Implement testgetNextSupervisorStep().
    */
    public function testgetNextSupervisorStep() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getNextSupervisorStep', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getPreviousSupervisorStep
    * @todo   Implement testgetPreviousSupervisorStep().
    */
    public function testgetPreviousSupervisorStep() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getPreviousSupervisorStep', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getTransferHistoryCriteria
    * @todo   Implement testgetTransferHistoryCriteria().
    */
    public function testgetTransferHistoryCriteria() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getTransferHistoryCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::prepareCriteriaForToDo
    * @todo   Implement testprepareCriteriaForToDo().
    */
    public function testprepareCriteriaForToDo() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'prepareCriteriaForToDo', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getConditionCasesList
    * @todo   Implement testgetConditionCasesList().
    */
    public function testgetConditionCasesList() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getConditionCasesList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::loadCaseInCurrentDelegation
    * @todo   Implement testloadCaseInCurrentDelegation().
    */
    public function testloadCaseInCurrentDelegation() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'loadCaseInCurrentDelegation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::loadCaseByDelegation
    * @todo   Implement testloadCaseByDelegation().
    */
    public function testloadCaseByDelegation() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'loadCaseByDelegation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::ThrowUnpauseDaemon
    * @todo   Implement testThrowUnpauseDaemon().
    */
    public function testThrowUnpauseDaemon() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'ThrowUnpauseDaemon', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::UnpauseRoutedCasesWithPauseFlagEnabled
    * @todo   Implement testUnpauseRoutedCasesWithPauseFlagEnabled().
    */
    public function testUnpauseRoutedCasesWithPauseFlagEnabled() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'UnpauseRoutedCasesWithPauseFlagEnabled', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getApplicationUIDByNumber
    * @todo   Implement testgetApplicationUIDByNumber().
    */
    public function testgetApplicationUIDByNumber() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getApplicationUIDByNumber', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getCurrentDelegation
    * @todo   Implement testgetCurrentDelegation().
    */
    public function testgetCurrentDelegation() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getCurrentDelegation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::loadTriggers
    * @todo   Implement testloadTriggers().
    */
    public function testloadTriggers() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'loadTriggers', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::executeTriggers
    * @todo   Implement testexecuteTriggers().
    */
    public function testexecuteTriggers() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'executeTriggers', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getTriggerNames
    * @todo   Implement testgetTriggerNames().
    */
    public function testgetTriggerNames() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getTriggerNames', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getInputDocumentsCriteria
    * @todo   Implement testgetInputDocumentsCriteria().
    */
    public function testgetInputDocumentsCriteria() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getInputDocumentsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getInputDocumentsCriteriaToRevise
    * @todo   Implement testgetInputDocumentsCriteriaToRevise().
    */
    public function testgetInputDocumentsCriteriaToRevise() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getInputDocumentsCriteriaToRevise', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getOutputDocumentsCriteriaToRevise
    * @todo   Implement testgetOutputDocumentsCriteriaToRevise().
    */
    public function testgetOutputDocumentsCriteriaToRevise() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getOutputDocumentsCriteriaToRevise', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getCriteriaProcessCases
    * @todo   Implement testgetCriteriaProcessCases().
    */
    public function testgetCriteriaProcessCases() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getCriteriaProcessCases', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::pauseCase
    * @todo   Implement testpauseCase().
    */
    public function testpauseCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'pauseCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::unpauseCase
    * @todo   Implement testunpauseCase().
    */
    public function testunpauseCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'unpauseCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::cancelCase
    * @todo   Implement testcancelCase().
    */
    public function testcancelCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'cancelCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::reactivateCase
    * @todo   Implement testreactivateCase().
    */
    public function testreactivateCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'reactivateCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::reassignCase
    * @todo   Implement testreassignCase().
    */
    public function testreassignCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'reassignCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllDynaformsStepsToRevise
    * @todo   Implement testgetAllDynaformsStepsToRevise().
    */
    public function testgetAllDynaformsStepsToRevise() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllDynaformsStepsToRevise', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllInputsStepsToRevise
    * @todo   Implement testgetAllInputsStepsToRevise().
    */
    public function testgetAllInputsStepsToRevise() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllInputsStepsToRevise', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllUploadedDocumentsCriteria
    * @todo   Implement testgetAllUploadedDocumentsCriteria().
    */
    public function testgetAllUploadedDocumentsCriteria() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllUploadedDocumentsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllGeneratedDocumentsCriteria
    * @todo   Implement testgetAllGeneratedDocumentsCriteria().
    */
    public function testgetAllGeneratedDocumentsCriteria() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllGeneratedDocumentsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getallDynaformsCriteria
    * @todo   Implement testgetallDynaformsCriteria().
    */
    public function testgetallDynaformsCriteria() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getallDynaformsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::sendNotifications
    * @todo   Implement testsendNotifications().
    */
    public function testsendNotifications() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'sendNotifications', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllObjects
    * @todo   Implement testgetAllObjects().
    */
    public function testgetAllObjects() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllObjects', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllObjectsFrom
    * @todo   Implement testgetAllObjectsFrom().
    */
    public function testgetAllObjectsFrom() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllObjectsFrom', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::verifyCaseTracker
    * @todo   Implement testverifyCaseTracker().
    */
    public function testverifyCaseTracker() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'verifyCaseTracker', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::caseTrackerPermissions
    * @todo   Implement testcaseTrackerPermissions().
    */
    public function testcaseTrackerPermissions() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'caseTrackerPermissions', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::verifyTable
    * @todo   Implement testverifyTable().
    */
    public function testverifyTable() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'verifyTable', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllUploadedDocumentsCriteriaTracker
    * @todo   Implement testgetAllUploadedDocumentsCriteriaTracker().
    */
    public function testgetAllUploadedDocumentsCriteriaTracker() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllUploadedDocumentsCriteriaTracker', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllGeneratedDocumentsCriteriaTracker
    * @todo   Implement testgetAllGeneratedDocumentsCriteriaTracker().
    */
    public function testgetAllGeneratedDocumentsCriteriaTracker() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllGeneratedDocumentsCriteriaTracker', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getHistoryMessagesTracker
    * @todo   Implement testgetHistoryMessagesTracker().
    */
    public function testgetHistoryMessagesTracker() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getHistoryMessagesTracker', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getHistoryMessagesTrackerExt
    * @todo   Implement testgetHistoryMessagesTrackerExt().
    */
    public function testgetHistoryMessagesTrackerExt() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getHistoryMessagesTrackerExt', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getHistoryMessagesTrackerView
    * @todo   Implement testgetHistoryMessagesTrackerView().
    */
    public function testgetHistoryMessagesTrackerView() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getHistoryMessagesTrackerView', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllObjectsFromProcess
    * @todo   Implement testgetAllObjectsFromProcess().
    */
    public function testgetAllObjectsFromProcess() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllObjectsFromProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::executeTriggersAfterExternal
    * @todo   Implement testexecuteTriggersAfterExternal().
    */
    public function testexecuteTriggersAfterExternal() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'executeTriggersAfterExternal', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::thisIsTheCurrentUser
    * @todo   Implement testthisIsTheCurrentUser().
    */
    public function testthisIsTheCurrentUser() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'thisIsTheCurrentUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getCriteriaUsersCases
    * @todo   Implement testgetCriteriaUsersCases().
    */
    public function testgetCriteriaUsersCases() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getCriteriaUsersCases', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAdvancedSearch
    * @todo   Implement testgetAdvancedSearch().
    */
    public function testgetAdvancedSearch() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAdvancedSearch', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getConditionCasesCount
    * @todo   Implement testgetConditionCasesCount().
    */
    public function testgetConditionCasesCount() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getConditionCasesCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getAllConditionCasesCount
    * @todo   Implement testgetAllConditionCasesCount().
    */
    public function testgetAllConditionCasesCount() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getAllConditionCasesCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::userParticipatedInCase
    * @todo   Implement testuserParticipatedInCase().
    */
    public function testuserParticipatedInCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'userParticipatedInCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getCurrentDelegationCase
    * @todo   Implement testgetCurrentDelegationCase().
    */
    public function testgetCurrentDelegationCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getCurrentDelegationCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::clearCaseSessionData
    * @todo   Implement testclearCaseSessionData().
    */
    public function testclearCaseSessionData() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'clearCaseSessionData', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::jumpToCase
    * @todo   Implement testjumpToCase().
    */
    public function testjumpToCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'jumpToCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::discriminateCases
    * @todo   Implement testdiscriminateCases().
    */
    public function testdiscriminateCases() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'discriminateCases', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::GetAllOpenDelegation
    * @todo   Implement testGetAllOpenDelegation().
    */
    public function testGetAllOpenDelegation() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'GetAllOpenDelegation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getUsersToReassign
    * @todo   Implement testgetUsersToReassign().
    */
    public function testgetUsersToReassign() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getUsersToReassign', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getUsersParticipatedInCase
    * @todo   Implement testgetUsersParticipatedInCase().
    */
    public function testgetUsersParticipatedInCase() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getUsersParticipatedInCase', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers Cases::getCaseNotes
    * @todo   Implement testgetCaseNotes().
    */
    public function testgetCaseNotes() 
    { 
        if (class_exists('Cases')) {
             $methods = get_class_methods( 'Cases');
            $this->assertTrue( in_array( 'getCaseNotes', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
