<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.headPublisher.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:39:54.
  */ 

  class classheadPublisherTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers headPublisher::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( '__construct', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::getSingleton
    * @todo   Implement testgetSingleton().
    */
    public function testgetSingleton() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'getSingleton', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::setTitle
    * @todo   Implement testsetTitle().
    */
    public function testsetTitle() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'setTitle', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::addMaborakFile
    * @todo   Implement testaddMaborakFile().
    */
    public function testaddMaborakFile() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'addMaborakFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::addScriptFile
    * @todo   Implement testaddScriptFile().
    */
    public function testaddScriptFile() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'addScriptFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::addInstanceModule
    * @todo   Implement testaddInstanceModule().
    */
    public function testaddInstanceModule() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'addInstanceModule', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::addClassModule
    * @todo   Implement testaddClassModule().
    */
    public function testaddClassModule() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'addClassModule', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::addScriptCode
    * @todo   Implement testaddScriptCode().
    */
    public function testaddScriptCode() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'addScriptCode', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::printHeader
    * @todo   Implement testprintHeader().
    */
    public function testprintHeader() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'printHeader', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::printRawHeader
    * @todo   Implement testprintRawHeader().
    */
    public function testprintRawHeader() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'printRawHeader', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::clearScripts
    * @todo   Implement testclearScripts().
    */
    public function testclearScripts() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'clearScripts', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::includeExtJs
    * @todo   Implement testincludeExtJs().
    */
    public function testincludeExtJs() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'includeExtJs', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::getExtJsStylesheets
    * @todo   Implement testgetExtJsStylesheets().
    */
    public function testgetExtJsStylesheets() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'getExtJsStylesheets', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::getExtJsScripts
    * @todo   Implement testgetExtJsScripts().
    */
    public function testgetExtJsScripts() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'getExtJsScripts', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::getExtJsVariablesScript
    * @todo   Implement testgetExtJsVariablesScript().
    */
    public function testgetExtJsVariablesScript() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'getExtJsVariablesScript', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::getExtJsLibraries
    * @todo   Implement testgetExtJsLibraries().
    */
    public function testgetExtJsLibraries() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'getExtJsLibraries', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::usingExtJs
    * @todo   Implement testusingExtJs().
    */
    public function testusingExtJs() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'usingExtJs', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::setExtSkin
    * @todo   Implement testsetExtSkin().
    */
    public function testsetExtSkin() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'setExtSkin', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::addExtJsScript
    * @todo   Implement testaddExtJsScript().
    */
    public function testaddExtJsScript() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'addExtJsScript', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::AddContent
    * @todo   Implement testAddContent().
    */
    public function testAddContent() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'AddContent', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::getContent
    * @todo   Implement testgetContent().
    */
    public function testgetContent() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'getContent', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::Assign
    * @todo   Implement testAssign().
    */
    public function testAssign() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'Assign', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::AssignVar
    * @todo   Implement testAssignVar().
    */
    public function testAssignVar() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'AssignVar', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::getVars
    * @todo   Implement testgetVars().
    */
    public function testgetVars() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'getVars', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::AssignNumber
    * @todo   Implement testAssignNumber().
    */
    public function testAssignNumber() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'AssignNumber', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::renderExtJs
    * @todo   Implement testrenderExtJs().
    */
    public function testrenderExtJs() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'renderExtJs', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::stripCodeQuotes
    * @todo   Implement teststripCodeQuotes().
    */
    public function teststripCodeQuotes() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'stripCodeQuotes', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers headPublisher::disableHeaderScripts
    * @todo   Implement testdisableHeaderScripts().
    */
    public function testdisableHeaderScripts() 
    { 
        if (class_exists('headPublisher')) {
             $methods = get_class_methods( 'headPublisher');
            $this->assertTrue( in_array( 'disableHeaderScripts', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
