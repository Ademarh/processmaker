<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.dbtable.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:39:55.
  */ 

  class classDBTableTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers DBTable::dBTable
    * @todo   Implement testdBTable().
    */
    public function testdBTable() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'dBTable', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::setTo
    * @todo   Implement testsetTo().
    */
    public function testsetTo() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'setTo', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::loadEmpty
    * @todo   Implement testloadEmpty().
    */
    public function testloadEmpty() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'loadEmpty', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::loadWhere
    * @todo   Implement testloadWhere().
    */
    public function testloadWhere() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'loadWhere', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::load
    * @todo   Implement testload().
    */
    public function testload() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'load', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::nextvalPGSql
    * @todo   Implement testnextvalPGSql().
    */
    public function testnextvalPGSql() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'nextvalPGSql', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::insert
    * @todo   Implement testinsert().
    */
    public function testinsert() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'insert', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::update
    * @todo   Implement testupdate().
    */
    public function testupdate() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'update', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::save
    * @todo   Implement testsave().
    */
    public function testsave() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'save', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::delete
    * @todo   Implement testdelete().
    */
    public function testdelete() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'delete', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers DBTable::next
    * @todo   Implement testnext().
    */
    public function testnext() 
    { 
        if (class_exists('DBTable')) {
             $methods = get_class_methods( 'DBTable');
            $this->assertTrue( in_array( 'next', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
