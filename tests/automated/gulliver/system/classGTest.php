<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.g.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:39:55.
  */ 

  class classGTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers G::is_https
    * @todo   Implement testis_https().
    */
    public function testis_https() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'is_https', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::array_fill_value
    * @todo   Implement testarray_fill_value().
    */
    public function testarray_fill_value() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'array_fill_value', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::generate_password
    * @todo   Implement testgenerate_password().
    */
    public function testgenerate_password() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'generate_password', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::array_concat
    * @todo   Implement testarray_concat().
    */
    public function testarray_concat() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'array_concat', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::var_compare
    * @todo   Implement testvar_compare().
    */
    public function testvar_compare() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'var_compare', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::var_probe
    * @todo   Implement testvar_probe().
    */
    public function testvar_probe() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'var_probe', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getVersion
    * @todo   Implement testgetVersion().
    */
    public function testgetVersion() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getVersion', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getIpAddress
    * @todo   Implement testgetIpAddress().
    */
    public function testgetIpAddress() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getIpAddress', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getMacAddress
    * @todo   Implement testgetMacAddress().
    */
    public function testgetMacAddress() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getMacAddress', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::microtime_float
    * @todo   Implement testmicrotime_float().
    */
    public function testmicrotime_float() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'microtime_float', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::setFatalErrorHandler
    * @todo   Implement testsetFatalErrorHandler().
    */
    public function testsetFatalErrorHandler() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'setFatalErrorHandler', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::setErrorHandler
    * @todo   Implement testsetErrorHandler().
    */
    public function testsetErrorHandler() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'setErrorHandler', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::fatalErrorHandler
    * @todo   Implement testfatalErrorHandler().
    */
    public function testfatalErrorHandler() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'fatalErrorHandler', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::customErrorHandler
    * @todo   Implement testcustomErrorHandler().
    */
    public function testcustomErrorHandler() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'customErrorHandler', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::showErrorSource
    * @todo   Implement testshowErrorSource().
    */
    public function testshowErrorSource() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'showErrorSource', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::customErrorLog
    * @todo   Implement testcustomErrorLog().
    */
    public function testcustomErrorLog() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'customErrorLog', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::verboseError
    * @todo   Implement testverboseError().
    */
    public function testverboseError() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'verboseError', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::encrypt
    * @todo   Implement testencrypt().
    */
    public function testencrypt() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'encrypt', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::decrypt
    * @todo   Implement testdecrypt().
    */
    public function testdecrypt() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'decrypt', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::lookup
    * @todo   Implement testlookup().
    */
    public function testlookup() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'lookup', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::mk_dir
    * @todo   Implement testmk_dir().
    */
    public function testmk_dir() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'mk_dir', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::rm_dir
    * @todo   Implement testrm_dir().
    */
    public function testrm_dir() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'rm_dir', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::verifyPath
    * @todo   Implement testverifyPath().
    */
    public function testverifyPath() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'verifyPath', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::expandPath
    * @todo   Implement testexpandPath().
    */
    public function testexpandPath() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'expandPath', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadSystem
    * @todo   Implement testLoadSystem().
    */
    public function testLoadSystem() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadSystem', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadSystemExist
    * @todo   Implement testLoadSystemExist().
    */
    public function testLoadSystemExist() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadSystemExist', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::RenderPage
    * @todo   Implement testRenderPage().
    */
    public function testRenderPage() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'RenderPage', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadSkin
    * @todo   Implement testLoadSkin().
    */
    public function testLoadSkin() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadSkin', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadInclude
    * @todo   Implement testLoadInclude().
    */
    public function testLoadInclude() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadInclude', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadAllModelClasses
    * @todo   Implement testLoadAllModelClasses().
    */
    public function testLoadAllModelClasses() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadAllModelClasses', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadAllPluginModelClasses
    * @todo   Implement testLoadAllPluginModelClasses().
    */
    public function testLoadAllPluginModelClasses() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadAllPluginModelClasses', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadTemplate
    * @todo   Implement testLoadTemplate().
    */
    public function testLoadTemplate() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadTemplate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadClassRBAC
    * @todo   Implement testLoadClassRBAC().
    */
    public function testLoadClassRBAC() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadClassRBAC', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadClass
    * @todo   Implement testLoadClass().
    */
    public function testLoadClass() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadClass', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadThirdParty
    * @todo   Implement testLoadThirdParty().
    */
    public function testLoadThirdParty() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadThirdParty', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::encryptlink
    * @todo   Implement testencryptlink().
    */
    public function testencryptlink() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'encryptlink', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::parseURI
    * @todo   Implement testparseURI().
    */
    public function testparseURI() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'parseURI', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::strip_slashes
    * @todo   Implement teststrip_slashes().
    */
    public function teststrip_slashes() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'strip_slashes', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::logTimeByPage
    * @todo   Implement testlogTimeByPage().
    */
    public function testlogTimeByPage() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'logTimeByPage', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::streamCSSBigFile
    * @todo   Implement teststreamCSSBigFile().
    */
    public function teststreamCSSBigFile() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'streamCSSBigFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::streamJSTranslationFile
    * @todo   Implement teststreamJSTranslationFile().
    */
    public function teststreamJSTranslationFile() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'streamJSTranslationFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::streamFile
    * @todo   Implement teststreamFile().
    */
    public function teststreamFile() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'streamFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::trimSourceCodeFile
    * @todo   Implement testtrimSourceCodeFile().
    */
    public function testtrimSourceCodeFile() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'trimSourceCodeFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::sendHeaders
    * @todo   Implement testsendHeaders().
    */
    public function testsendHeaders() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'sendHeaders', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::virtualURI
    * @todo   Implement testvirtualURI().
    */
    public function testvirtualURI() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'virtualURI', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::createUID
    * @todo   Implement testcreateUID().
    */
    public function testcreateUID() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'createUID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getUIDName
    * @todo   Implement testgetUIDName().
    */
    public function testgetUIDName() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getUIDName', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::formatNumber
    * @todo   Implement testformatNumber().
    */
    public function testformatNumber() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'formatNumber', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::formatDate
    * @todo   Implement testformatDate().
    */
    public function testformatDate() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'formatDate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getformatedDate
    * @todo   Implement testgetformatedDate().
    */
    public function testgetformatedDate() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getformatedDate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::arrayDiff
    * @todo   Implement testarrayDiff().
    */
    public function testarrayDiff() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'arrayDiff', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::complete_field
    * @todo   Implement testcomplete_field().
    */
    public function testcomplete_field() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'complete_field', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::sqlEscape
    * @todo   Implement testsqlEscape().
    */
    public function testsqlEscape() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'sqlEscape', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::MySQLSintaxis
    * @todo   Implement testMySQLSintaxis().
    */
    public function testMySQLSintaxis() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'MySQLSintaxis', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::replaceDataField
    * @todo   Implement testreplaceDataField().
    */
    public function testreplaceDataField() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'replaceDataField', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::loadLanguageFile
    * @todo   Implement testloadLanguageFile().
    */
    public function testloadLanguageFile() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'loadLanguageFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::registerLabel
    * @todo   Implement testregisterLabel().
    */
    public function testregisterLabel() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'registerLabel', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadMenuXml
    * @todo   Implement testLoadMenuXml().
    */
    public function testLoadMenuXml() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadMenuXml', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::SendMessageXml
    * @todo   Implement testSendMessageXml().
    */
    public function testSendMessageXml() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'SendMessageXml', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::SendTemporalMessage
    * @todo   Implement testSendTemporalMessage().
    */
    public function testSendTemporalMessage() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'SendTemporalMessage', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::SendMessage
    * @todo   Implement testSendMessage().
    */
    public function testSendMessage() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'SendMessage', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::SendMessageText
    * @todo   Implement testSendMessageText().
    */
    public function testSendMessageText() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'SendMessageText', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadMessage
    * @todo   Implement testLoadMessage().
    */
    public function testLoadMessage() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadMessage', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadXmlLabel
    * @todo   Implement testLoadXmlLabel().
    */
    public function testLoadXmlLabel() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadXmlLabel', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadMessageXml
    * @todo   Implement testLoadMessageXml().
    */
    public function testLoadMessageXml() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadMessageXml', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadTranslationObject
    * @todo   Implement testLoadTranslationObject().
    */
    public function testLoadTranslationObject() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadTranslationObject', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadTranslation
    * @todo   Implement testLoadTranslation().
    */
    public function testLoadTranslation() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadTranslation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getTranslations
    * @todo   Implement testgetTranslations().
    */
    public function testgetTranslations() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getTranslations', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::LoadArrayFile
    * @todo   Implement testLoadArrayFile().
    */
    public function testLoadArrayFile() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'LoadArrayFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::expandUri
    * @todo   Implement testexpandUri().
    */
    public function testexpandUri() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'expandUri', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::genericForceLogin
    * @todo   Implement testgenericForceLogin().
    */
    public function testgenericForceLogin() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'genericForceLogin', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::capitalize
    * @todo   Implement testcapitalize().
    */
    public function testcapitalize() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'capitalize', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::toUpper
    * @todo   Implement testtoUpper().
    */
    public function testtoUpper() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'toUpper', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::toLower
    * @todo   Implement testtoLower().
    */
    public function testtoLower() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'toLower', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::http_build_query
    * @todo   Implement testhttp_build_query().
    */
    public function testhttp_build_query() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'http_build_query', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::header
    * @todo   Implement testheader().
    */
    public function testheader() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'header', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::forceLogin
    * @todo   Implement testforceLogin().
    */
    public function testforceLogin() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'forceLogin', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::add_slashes
    * @todo   Implement testadd_slashes().
    */
    public function testadd_slashes() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'add_slashes', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::uploadFile
    * @todo   Implement testuploadFile().
    */
    public function testuploadFile() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'uploadFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::resizeImage
    * @todo   Implement testresizeImage().
    */
    public function testresizeImage() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'resizeImage', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::array_merges
    * @todo   Implement testarray_merges().
    */
    public function testarray_merges() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'array_merges', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::array_merge_2
    * @todo   Implement testarray_merge_2().
    */
    public function testarray_merge_2() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'array_merge_2', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::generateUniqueID
    * @todo   Implement testgenerateUniqueID().
    */
    public function testgenerateUniqueID() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'generateUniqueID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::generateCode
    * @todo   Implement testgenerateCode().
    */
    public function testgenerateCode() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'generateCode', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::verifyUniqueID
    * @todo   Implement testverifyUniqueID().
    */
    public function testverifyUniqueID() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'verifyUniqueID', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::is_utf8
    * @todo   Implement testis_utf8().
    */
    public function testis_utf8() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'is_utf8', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::CurDate
    * @todo   Implement testCurDate().
    */
    public function testCurDate() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'CurDate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getSystemConstants
    * @todo   Implement testgetSystemConstants().
    */
    public function testgetSystemConstants() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getSystemConstants', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::capitalizeWords
    * @todo   Implement testcapitalizeWords().
    */
    public function testcapitalizeWords() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'capitalizeWords', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::unhtmlentities
    * @todo   Implement testunhtmlentities().
    */
    public function testunhtmlentities() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'unhtmlentities', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::xmlParser
    * @todo   Implement testxmlParser().
    */
    public function testxmlParser() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'xmlParser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::_del_p
    * @todo   Implement test_del_p().
    */
    public function test_del_p() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( '_del_p', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::ary2xml
    * @todo   Implement testary2xml().
    */
    public function testary2xml() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'ary2xml', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::ins2ary
    * @todo   Implement testins2ary().
    */
    public function testins2ary() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'ins2ary', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::evalJScript
    * @todo   Implement testevalJScript().
    */
    public function testevalJScript() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'evalJScript', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::inflect
    * @todo   Implement testinflect().
    */
    public function testinflect() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'inflect', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::pr
    * @todo   Implement testpr().
    */
    public function testpr() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'pr', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::dump
    * @todo   Implement testdump().
    */
    public function testdump() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'dump', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::stripCDATA
    * @todo   Implement teststripCDATA().
    */
    public function teststripCDATA() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'stripCDATA', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::sys_get_temp_dir
    * @todo   Implement testsys_get_temp_dir().
    */
    public function testsys_get_temp_dir() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'sys_get_temp_dir', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::PMWSCompositeResponse
    * @todo   Implement testPMWSCompositeResponse().
    */
    public function testPMWSCompositeResponse() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'PMWSCompositeResponse', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::emailAddress
    * @todo   Implement testemailAddress().
    */
    public function testemailAddress() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'emailAddress', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::json_encode
    * @todo   Implement testjson_encode().
    */
    public function testjson_encode() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'json_encode', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::json_decode
    * @todo   Implement testjson_decode().
    */
    public function testjson_decode() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'json_decode', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::isHttpRequest
    * @todo   Implement testisHttpRequest().
    */
    public function testisHttpRequest() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'isHttpRequest', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::sendMail
    * @todo   Implement testsendMail().
    */
    public function testsendMail() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'sendMail', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::envelopEmailAddresses
    * @todo   Implement testenvelopEmailAddresses().
    */
    public function testenvelopEmailAddresses() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'envelopEmailAddresses', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::gettype
    * @todo   Implement testgettype().
    */
    public function testgettype() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'gettype', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::removeComments
    * @todo   Implement testremoveComments().
    */
    public function testremoveComments() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'removeComments', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getMemoryUsage
    * @todo   Implement testgetMemoryUsage().
    */
    public function testgetMemoryUsage() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getMemoryUsage', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getFormatUserList
    * @todo   Implement testgetFormatUserList().
    */
    public function testgetFormatUserList() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getFormatUserList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getModel
    * @todo   Implement testgetModel().
    */
    public function testgetModel() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getModel', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::is_rwritable
    * @todo   Implement testis_rwritable().
    */
    public function testis_rwritable() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'is_rwritable', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::rglob
    * @todo   Implement testrglob().
    */
    public function testrglob() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'rglob', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::browser_detection
    * @todo   Implement testbrowser_detection().
    */
    public function testbrowser_detection() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'browser_detection', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::get_os_data
    * @todo   Implement testget_os_data().
    */
    public function testget_os_data() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'get_os_data', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::get_item_version
    * @todo   Implement testget_item_version().
    */
    public function testget_item_version() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'get_item_version', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::get_set_count
    * @todo   Implement testget_set_count().
    */
    public function testget_set_count() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'get_set_count', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::check_is_mobile
    * @todo   Implement testcheck_is_mobile().
    */
    public function testcheck_is_mobile() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'check_is_mobile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::get_mobile_data
    * @todo   Implement testget_mobile_data().
    */
    public function testget_mobile_data() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'get_mobile_data', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getBrowser
    * @todo   Implement testgetBrowser().
    */
    public function testgetBrowser() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getBrowser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::script_time
    * @todo   Implement testscript_time().
    */
    public function testscript_time() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'script_time', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getDirectorySize
    * @todo   Implement testgetDirectorySize().
    */
    public function testgetDirectorySize() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getDirectorySize', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getCacheFileNameByPattern
    * @todo   Implement testgetCacheFileNameByPattern().
    */
    public function testgetCacheFileNameByPattern() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getCacheFileNameByPattern', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::getCheckSum
    * @todo   Implement testgetCheckSum().
    */
    public function testgetCheckSum() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'getCheckSum', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::parse_ini_string
    * @todo   Implement testparse_ini_string().
    */
    public function testparse_ini_string() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'parse_ini_string', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::disableEnableINIvariable
    * @todo   Implement testdisableEnableINIvariable().
    */
    public function testdisableEnableINIvariable() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'disableEnableINIvariable', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::setINIvariable
    * @todo   Implement testsetINIvariable().
    */
    public function testsetINIvariable() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'setINIvariable', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::write_php_ini
    * @todo   Implement testwrite_php_ini().
    */
    public function testwrite_php_ini() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'write_php_ini', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::verifyWriteAccess
    * @todo   Implement testverifyWriteAccess().
    */
    public function testverifyWriteAccess() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'verifyWriteAccess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::renderTemplate
    * @todo   Implement testrenderTemplate().
    */
    public function testrenderTemplate() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'renderTemplate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::parseTemplate
    * @todo   Implement testparseTemplate().
    */
    public function testparseTemplate() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'parseTemplate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::update_php_ini
    * @todo   Implement testupdate_php_ini().
    */
    public function testupdate_php_ini() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'update_php_ini', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::is_writable_r
    * @todo   Implement testis_writable_r().
    */
    public function testis_writable_r() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'is_writable_r', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::eprint
    * @todo   Implement testeprint().
    */
    public function testeprint() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'eprint', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::println
    * @todo   Implement testprintln().
    */
    public function testprintln() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'println', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::eprintln
    * @todo   Implement testeprintln().
    */
    public function testeprintln() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( 'eprintln', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers G::__
    * @todo   Implement test__().
    */
    public function test__() 
    { 
        if (class_exists('G')) {
             $methods = get_class_methods( 'G');
            $this->assertTrue( in_array( '__', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
