<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php' ;
  require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php' ;
  require_once PATH_TRUNK . 'workflow/engine/classes/class.dates.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:56:17.
  */ 

  class classdatesTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers dates::calculateDate
    * @todo   Implement testcalculateDate().
    */
    public function testcalculateDate() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'calculateDate', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::calculateDate_noCalendar
    * @todo   Implement testcalculateDate_noCalendar().
    */
    public function testcalculateDate_noCalendar() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'calculateDate_noCalendar', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::calculateDuration
    * @todo   Implement testcalculateDuration().
    */
    public function testcalculateDuration() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'calculateDuration', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::prepareInformation
    * @todo   Implement testprepareInformation().
    */
    public function testprepareInformation() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'prepareInformation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::setSkipEveryYear
    * @todo   Implement testsetSkipEveryYear().
    */
    public function testsetSkipEveryYear() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'setSkipEveryYear', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::addHoliday
    * @todo   Implement testaddHoliday().
    */
    public function testaddHoliday() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'addHoliday', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::setHolidays
    * @todo   Implement testsetHolidays().
    */
    public function testsetHolidays() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'setHolidays', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::setWeekends
    * @todo   Implement testsetWeekends().
    */
    public function testsetWeekends() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'setWeekends', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::skipDayOfWeek
    * @todo   Implement testskipDayOfWeek().
    */
    public function testskipDayOfWeek() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'skipDayOfWeek', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::addNonWorkingRange
    * @todo   Implement testaddNonWorkingRange().
    */
    public function testaddNonWorkingRange() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'addNonWorkingRange', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::addDays
    * @todo   Implement testaddDays().
    */
    public function testaddDays() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'addDays', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::addHours
    * @todo   Implement testaddHours().
    */
    public function testaddHours() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'addHours', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::inRange
    * @todo   Implement testinRange().
    */
    public function testinRange() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'inRange', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::truncateTime
    * @todo   Implement testtruncateTime().
    */
    public function testtruncateTime() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'truncateTime', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::getTime
    * @todo   Implement testgetTime().
    */
    public function testgetTime() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'getTime', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::setTime
    * @todo   Implement testsetTime().
    */
    public function testsetTime() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'setTime', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::listForYear
    * @todo   Implement testlistForYear().
    */
    public function testlistForYear() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'listForYear', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers dates::changeYear
    * @todo   Implement testchangeYear().
    */
    public function testchangeYear() 
    { 
        if (class_exists('dates')) {
             $methods = get_class_methods( 'dates');
            $this->assertTrue( in_array( 'changeYear', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
