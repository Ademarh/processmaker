<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php' ;
  require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php' ;
  require_once PATH_TRUNK . 'workflow/engine/classes/class.triggerLibrary.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:56:18.
  */ 

  class classtriggerLibraryTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers triggerLibrary::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( '__construct', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers triggerLibrary::getSingleton
    * @todo   Implement testgetSingleton().
    */
    public function testgetSingleton() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( 'getSingleton', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers triggerLibrary::serializeInstance
    * @todo   Implement testserializeInstance().
    */
    public function testserializeInstance() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( 'serializeInstance', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers triggerLibrary::unSerializeInstance
    * @todo   Implement testunSerializeInstance().
    */
    public function testunSerializeInstance() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( 'unSerializeInstance', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers triggerLibrary::registerFunctionsFileToLibrary
    * @todo   Implement testregisterFunctionsFileToLibrary().
    */
    public function testregisterFunctionsFileToLibrary() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( 'registerFunctionsFileToLibrary', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers triggerLibrary::getMethodsFromLibraryFile
    * @todo   Implement testgetMethodsFromLibraryFile().
    */
    public function testgetMethodsFromLibraryFile() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( 'getMethodsFromLibraryFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers triggerLibrary::getRegisteredClasses
    * @todo   Implement testgetRegisteredClasses().
    */
    public function testgetRegisteredClasses() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( 'getRegisteredClasses', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers triggerLibrary::getLibraryDefinition
    * @todo   Implement testgetLibraryDefinition().
    */
    public function testgetLibraryDefinition() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( 'getLibraryDefinition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers triggerLibrary::__destruct
    * @todo   Implement test__destruct().
    */
    public function test__destruct() 
    { 
        if (class_exists('triggerLibrary')) {
             $methods = get_class_methods( 'triggerLibrary');
            $this->assertTrue( in_array( '__destruct', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
