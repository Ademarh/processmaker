<?php 
  require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php'; 
  require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php'; 
  require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php' ;
  require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php' ;
  require_once PATH_TRUNK . 'workflow/engine/classes/class.processMap.php'; 

  /** 
   * Generated by ProcessMaker Test Unit Generator on 2012-05-10 at 20:56:14.
  */ 

  class classprocessMapTest extends PHPUnit_Framework_TestCase 
  { 
    /**
    * @covers processMap::load
    * @todo   Implement testload().
    */
    public function testload() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'load', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::createProcess
    * @todo   Implement testcreateProcess().
    */
    public function testcreateProcess() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'createProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::updateProcess
    * @todo   Implement testupdateProcess().
    */
    public function testupdateProcess() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'updateProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::editProcess
    * @todo   Implement testeditProcess().
    */
    public function testeditProcess() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'editProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteProcess
    * @todo   Implement testdeleteProcess().
    */
    public function testdeleteProcess() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveTitlePosition
    * @todo   Implement testsaveTitlePosition().
    */
    public function testsaveTitlePosition() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveTitlePosition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::steps
    * @todo   Implement teststeps().
    */
    public function teststeps() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'steps', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getStepsCriteria
    * @todo   Implement testgetStepsCriteria().
    */
    public function testgetStepsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getStepsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getStepTriggersCriteria
    * @todo   Implement testgetStepTriggersCriteria().
    */
    public function testgetStepTriggersCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getStepTriggersCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAvailableBBCriteria
    * @todo   Implement testgetAvailableBBCriteria().
    */
    public function testgetAvailableBBCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAvailableBBCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::users
    * @todo   Implement testusers().
    */
    public function testusers() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'users', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::users_adhoc
    * @todo   Implement testusers_adhoc().
    */
    public function testusers_adhoc() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'users_adhoc', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getTaskUsersCriteria
    * @todo   Implement testgetTaskUsersCriteria().
    */
    public function testgetTaskUsersCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getTaskUsersCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAvailableUsersCriteria
    * @todo   Implement testgetAvailableUsersCriteria().
    */
    public function testgetAvailableUsersCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAvailableUsersCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::stepsConditions
    * @todo   Implement teststepsConditions().
    */
    public function teststepsConditions() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'stepsConditions', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::stepsTriggers
    * @todo   Implement teststepsTriggers().
    */
    public function teststepsTriggers() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'stepsTriggers', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::addTask
    * @todo   Implement testaddTask().
    */
    public function testaddTask() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'addTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::editTaskProperties
    * @todo   Implement testeditTaskProperties().
    */
    public function testeditTaskProperties() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'editTaskProperties', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveTaskPosition
    * @todo   Implement testsaveTaskPosition().
    */
    public function testsaveTaskPosition() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveTaskPosition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteTask
    * @todo   Implement testdeleteTask().
    */
    public function testdeleteTask() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteGateway
    * @todo   Implement testdeleteGateway().
    */
    public function testdeleteGateway() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteGateway', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::addGateway
    * @todo   Implement testaddGateway().
    */
    public function testaddGateway() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'addGateway', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::addGuide
    * @todo   Implement testaddGuide().
    */
    public function testaddGuide() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'addGuide', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveGuidePosition
    * @todo   Implement testsaveGuidePosition().
    */
    public function testsaveGuidePosition() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveGuidePosition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteGuide
    * @todo   Implement testdeleteGuide().
    */
    public function testdeleteGuide() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteGuide', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteGuides
    * @todo   Implement testdeleteGuides().
    */
    public function testdeleteGuides() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteGuides', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::addText
    * @todo   Implement testaddText().
    */
    public function testaddText() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'addText', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::updateText
    * @todo   Implement testupdateText().
    */
    public function testupdateText() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'updateText', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveTextPosition
    * @todo   Implement testsaveTextPosition().
    */
    public function testsaveTextPosition() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveTextPosition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteText
    * @todo   Implement testdeleteText().
    */
    public function testdeleteText() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteText', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveGatewayPosition
    * @todo   Implement testsaveGatewayPosition().
    */
    public function testsaveGatewayPosition() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveGatewayPosition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::dynaformsList
    * @todo   Implement testdynaformsList().
    */
    public function testdynaformsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'dynaformsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getDynaformsCriteria
    * @todo   Implement testgetDynaformsCriteria().
    */
    public function testgetDynaformsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getDynaformsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getDynaformsList
    * @todo   Implement testgetDynaformsList().
    */
    public function testgetDynaformsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getDynaformsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::outputdocsList
    * @todo   Implement testoutputdocsList().
    */
    public function testoutputdocsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'outputdocsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getOutputDocumentsCriteria
    * @todo   Implement testgetOutputDocumentsCriteria().
    */
    public function testgetOutputDocumentsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getOutputDocumentsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::inputdocsList
    * @todo   Implement testinputdocsList().
    */
    public function testinputdocsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'inputdocsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getInputDocumentsCriteria
    * @todo   Implement testgetInputDocumentsCriteria().
    */
    public function testgetInputDocumentsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getInputDocumentsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::triggersList
    * @todo   Implement testtriggersList().
    */
    public function testtriggersList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'triggersList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getTriggersCriteria
    * @todo   Implement testgetTriggersCriteria().
    */
    public function testgetTriggersCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getTriggersCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getTriggers
    * @todo   Implement testgetTriggers().
    */
    public function testgetTriggers() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getTriggers', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::caseSchedulerList
    * @todo   Implement testcaseSchedulerList().
    */
    public function testcaseSchedulerList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'caseSchedulerList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::logCaseSchedulerList
    * @todo   Implement testlogCaseSchedulerList().
    */
    public function testlogCaseSchedulerList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'logCaseSchedulerList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::messagesList
    * @todo   Implement testmessagesList().
    */
    public function testmessagesList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'messagesList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::reportTablesList
    * @todo   Implement testreportTablesList().
    */
    public function testreportTablesList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'reportTablesList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getReportTablesCriteria
    * @todo   Implement testgetReportTablesCriteria().
    */
    public function testgetReportTablesCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getReportTablesCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::currentPattern
    * @todo   Implement testcurrentPattern().
    */
    public function testcurrentPattern() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'currentPattern', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::newPattern
    * @todo   Implement testnewPattern().
    */
    public function testnewPattern() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'newPattern', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getNumberOfRoutes
    * @todo   Implement testgetNumberOfRoutes().
    */
    public function testgetNumberOfRoutes() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getNumberOfRoutes', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveNewPattern
    * @todo   Implement testsaveNewPattern().
    */
    public function testsaveNewPattern() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveNewPattern', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveNewGateway
    * @todo   Implement testsaveNewGateway().
    */
    public function testsaveNewGateway() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveNewGateway', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteDerivation
    * @todo   Implement testdeleteDerivation().
    */
    public function testdeleteDerivation() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteDerivation', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getConditionProcessList
    * @todo   Implement testgetConditionProcessList().
    */
    public function testgetConditionProcessList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getConditionProcessList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::supervisorDynaforms
    * @todo   Implement testsupervisorDynaforms().
    */
    public function testsupervisorDynaforms() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'supervisorDynaforms', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::supervisorInputs
    * @todo   Implement testsupervisorInputs().
    */
    public function testsupervisorInputs() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'supervisorInputs', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::webEntry
    * @todo   Implement testwebEntry().
    */
    public function testwebEntry() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'webEntry', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::webEntry_new
    * @todo   Implement testwebEntry_new().
    */
    public function testwebEntry_new() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'webEntry_new', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getSupervisorDynaformsCriteria
    * @todo   Implement testgetSupervisorDynaformsCriteria().
    */
    public function testgetSupervisorDynaformsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getSupervisorDynaformsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getSupervisorInputsCriteria
    * @todo   Implement testgetSupervisorInputsCriteria().
    */
    public function testgetSupervisorInputsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getSupervisorInputsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::availableSupervisorDynaforms
    * @todo   Implement testavailableSupervisorDynaforms().
    */
    public function testavailableSupervisorDynaforms() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'availableSupervisorDynaforms', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::availableSupervisorInputs
    * @todo   Implement testavailableSupervisorInputs().
    */
    public function testavailableSupervisorInputs() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'availableSupervisorInputs', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAvailableSupervisorDynaformsCriteria
    * @todo   Implement testgetAvailableSupervisorDynaformsCriteria().
    */
    public function testgetAvailableSupervisorDynaformsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAvailableSupervisorDynaformsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAvailableSupervisorInputsCriteria
    * @todo   Implement testgetAvailableSupervisorInputsCriteria().
    */
    public function testgetAvailableSupervisorInputsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAvailableSupervisorInputsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::assignSupervisorStep
    * @todo   Implement testassignSupervisorStep().
    */
    public function testassignSupervisorStep() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'assignSupervisorStep', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::removeSupervisorStep
    * @todo   Implement testremoveSupervisorStep().
    */
    public function testremoveSupervisorStep() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'removeSupervisorStep', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::listProcessesUser
    * @todo   Implement testlistProcessesUser().
    */
    public function testlistProcessesUser() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'listProcessesUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::listNoProcessesUser
    * @todo   Implement testlistNoProcessesUser().
    */
    public function testlistNoProcessesUser() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'listNoProcessesUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::assignProcessUser
    * @todo   Implement testassignProcessUser().
    */
    public function testassignProcessUser() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'assignProcessUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::removeProcessUser
    * @todo   Implement testremoveProcessUser().
    */
    public function testremoveProcessUser() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'removeProcessUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getObjectsPermissionsCriteria
    * @todo   Implement testgetObjectsPermissionsCriteria().
    */
    public function testgetObjectsPermissionsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getObjectsPermissionsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllObjectPermissionCount
    * @todo   Implement testgetAllObjectPermissionCount().
    */
    public function testgetAllObjectPermissionCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllObjectPermissionCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtObjectsPermissions
    * @todo   Implement testgetExtObjectsPermissions().
    */
    public function testgetExtObjectsPermissions() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtObjectsPermissions', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::objectsPermissionsList
    * @todo   Implement testobjectsPermissionsList().
    */
    public function testobjectsPermissionsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'objectsPermissionsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::newObjectPermission
    * @todo   Implement testnewObjectPermission().
    */
    public function testnewObjectPermission() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'newObjectPermission', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::editObjectPermission
    * @todo   Implement testeditObjectPermission().
    */
    public function testeditObjectPermission() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'editObjectPermission', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::caseTracker
    * @todo   Implement testcaseTracker().
    */
    public function testcaseTracker() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'caseTracker', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::caseTrackerObjects
    * @todo   Implement testcaseTrackerObjects().
    */
    public function testcaseTrackerObjects() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'caseTrackerObjects', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getCaseTrackerObjectsCriteria
    * @todo   Implement testgetCaseTrackerObjectsCriteria().
    */
    public function testgetCaseTrackerObjectsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getCaseTrackerObjectsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::availableCaseTrackerObjects
    * @todo   Implement testavailableCaseTrackerObjects().
    */
    public function testavailableCaseTrackerObjects() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'availableCaseTrackerObjects', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAvailableCaseTrackerObjectsCriteria
    * @todo   Implement testgetAvailableCaseTrackerObjectsCriteria().
    */
    public function testgetAvailableCaseTrackerObjectsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAvailableCaseTrackerObjectsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::assignCaseTrackerObject
    * @todo   Implement testassignCaseTrackerObject().
    */
    public function testassignCaseTrackerObject() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'assignCaseTrackerObject', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::removeCaseTrackerObject
    * @todo   Implement testremoveCaseTrackerObject().
    */
    public function testremoveCaseTrackerObject() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'removeCaseTrackerObject', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::upCaseTrackerObject
    * @todo   Implement testupCaseTrackerObject().
    */
    public function testupCaseTrackerObject() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'upCaseTrackerObject', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::downCaseTrackerObject
    * @todo   Implement testdownCaseTrackerObject().
    */
    public function testdownCaseTrackerObject() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'downCaseTrackerObject', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::processFilesManager
    * @todo   Implement testprocessFilesManager().
    */
    public function testprocessFilesManager() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'processFilesManager', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::exploreDirectory
    * @todo   Implement testexploreDirectory().
    */
    public function testexploreDirectory() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'exploreDirectory', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteFile
    * @todo   Implement testdeleteFile().
    */
    public function testdeleteFile() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteDirectory
    * @todo   Implement testdeleteDirectory().
    */
    public function testdeleteDirectory() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteDirectory', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::downloadFile
    * @todo   Implement testdownloadFile().
    */
    public function testdownloadFile() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'downloadFile', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::addSubProcess
    * @todo   Implement testaddSubProcess().
    */
    public function testaddSubProcess() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'addSubProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::deleteSubProcess
    * @todo   Implement testdeleteSubProcess().
    */
    public function testdeleteSubProcess() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'deleteSubProcess', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::subProcess_Properties
    * @todo   Implement testsubProcess_Properties().
    */
    public function testsubProcess_Properties() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'subProcess_Properties', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::subProcess_TaskIni
    * @todo   Implement testsubProcess_TaskIni().
    */
    public function testsubProcess_TaskIni() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'subProcess_TaskIni', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::eventsList
    * @todo   Implement testeventsList().
    */
    public function testeventsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'eventsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getEventsCriteria
    * @todo   Implement testgetEventsCriteria().
    */
    public function testgetEventsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getEventsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::editProcessNew
    * @todo   Implement testeditProcessNew().
    */
    public function testeditProcessNew() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'editProcessNew', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::loadProcessCategory
    * @todo   Implement testloadProcessCategory().
    */
    public function testloadProcessCategory() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'loadProcessCategory', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveTaskCordinates
    * @todo   Implement testsaveTaskCordinates().
    */
    public function testsaveTaskCordinates() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveTaskCordinates', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveAnnotationCordinates
    * @todo   Implement testsaveAnnotationCordinates().
    */
    public function testsaveAnnotationCordinates() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveAnnotationCordinates', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveEventPosition
    * @todo   Implement testsaveEventPosition().
    */
    public function testsaveEventPosition() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveEventPosition', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllProcesses
    * @todo   Implement testgetAllProcesses().
    */
    public function testgetAllProcesses() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllProcesses', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getDynaformList
    * @todo   Implement testgetDynaformList().
    */
    public function testgetDynaformList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getDynaformList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::listNewWebEntry
    * @todo   Implement testlistNewWebEntry().
    */
    public function testlistNewWebEntry() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'listNewWebEntry', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::usersExtList
    * @todo   Implement testusersExtList().
    */
    public function testusersExtList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'usersExtList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::caseNewSchedulerList
    * @todo   Implement testcaseNewSchedulerList().
    */
    public function testcaseNewSchedulerList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'caseNewSchedulerList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllTaskUserCount
    * @todo   Implement testgetAllTaskUserCount().
    */
    public function testgetAllTaskUserCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllTaskUserCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtTaskUsersCriteria
    * @todo   Implement testgetExtTaskUsersCriteria().
    */
    public function testgetExtTaskUsersCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtTaskUsersCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAvailableExtUsersCriteria
    * @todo   Implement testgetAvailableExtUsersCriteria().
    */
    public function testgetAvailableExtUsersCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAvailableExtUsersCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtAdditionalTablesList
    * @todo   Implement testgetExtAdditionalTablesList().
    */
    public function testgetExtAdditionalTablesList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtAdditionalTablesList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtAvailableBBCriteria
    * @todo   Implement testgetExtAvailableBBCriteria().
    */
    public function testgetExtAvailableBBCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtAvailableBBCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllStepCount
    * @todo   Implement testgetAllStepCount().
    */
    public function testgetAllStepCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllStepCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtStepsCriteria
    * @todo   Implement testgetExtStepsCriteria().
    */
    public function testgetExtStepsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtStepsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllStepTriggerCount
    * @todo   Implement testgetAllStepTriggerCount().
    */
    public function testgetAllStepTriggerCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllStepTriggerCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtStepTriggersCriteria
    * @todo   Implement testgetExtStepTriggersCriteria().
    */
    public function testgetExtStepTriggersCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtStepTriggersCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtAvailableStepTriggersCriteria
    * @todo   Implement testgetExtAvailableStepTriggersCriteria().
    */
    public function testgetExtAvailableStepTriggersCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtAvailableStepTriggersCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllDynaformCount
    * @todo   Implement testgetAllDynaformCount().
    */
    public function testgetAllDynaformCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllDynaformCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtDynaformsList
    * @todo   Implement testgetExtDynaformsList().
    */
    public function testgetExtDynaformsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtDynaformsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllInputDocumentCount
    * @todo   Implement testgetAllInputDocumentCount().
    */
    public function testgetAllInputDocumentCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllInputDocumentCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtInputDocumentsCriteria
    * @todo   Implement testgetExtInputDocumentsCriteria().
    */
    public function testgetExtInputDocumentsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtInputDocumentsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllOutputDocumentCount
    * @todo   Implement testgetAllOutputDocumentCount().
    */
    public function testgetAllOutputDocumentCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllOutputDocumentCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtOutputDocumentsCriteria
    * @todo   Implement testgetExtOutputDocumentsCriteria().
    */
    public function testgetExtOutputDocumentsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtOutputDocumentsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::subProcessExtProperties
    * @todo   Implement testsubProcessExtProperties().
    */
    public function testsubProcessExtProperties() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'subProcessExtProperties', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllProcessSupervisorsCount
    * @todo   Implement testgetAllProcessSupervisorsCount().
    */
    public function testgetAllProcessSupervisorsCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllProcessSupervisorsCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::listExtProcessesSupervisors
    * @todo   Implement testlistExtProcessesSupervisors().
    */
    public function testlistExtProcessesSupervisors() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'listExtProcessesSupervisors', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::listExtNoProcessesUser
    * @todo   Implement testlistExtNoProcessesUser().
    */
    public function testlistExtNoProcessesUser() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'listExtNoProcessesUser', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllSupervisorDynaformsCount
    * @todo   Implement testgetAllSupervisorDynaformsCount().
    */
    public function testgetAllSupervisorDynaformsCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllSupervisorDynaformsCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtSupervisorDynaformsList
    * @todo   Implement testgetExtSupervisorDynaformsList().
    */
    public function testgetExtSupervisorDynaformsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtSupervisorDynaformsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtAvailableSupervisorDynaformsList
    * @todo   Implement testgetExtAvailableSupervisorDynaformsList().
    */
    public function testgetExtAvailableSupervisorDynaformsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtAvailableSupervisorDynaformsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllSupervisorInputsCount
    * @todo   Implement testgetAllSupervisorInputsCount().
    */
    public function testgetAllSupervisorInputsCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllSupervisorInputsCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtSupervisorInputsList
    * @todo   Implement testgetExtSupervisorInputsList().
    */
    public function testgetExtSupervisorInputsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtSupervisorInputsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtAvailableSupervisorInputsList
    * @todo   Implement testgetExtAvailableSupervisorInputsList().
    */
    public function testgetExtAvailableSupervisorInputsList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtAvailableSupervisorInputsList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllDbSourceCount
    * @todo   Implement testgetAllDbSourceCount().
    */
    public function testgetAllDbSourceCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllDbSourceCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtCriteriaDBSList
    * @todo   Implement testgetExtCriteriaDBSList().
    */
    public function testgetExtCriteriaDBSList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtCriteriaDBSList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::newExtObjectPermission
    * @todo   Implement testnewExtObjectPermission().
    */
    public function testnewExtObjectPermission() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'newExtObjectPermission', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::ExtcaseTracker
    * @todo   Implement testExtcaseTracker().
    */
    public function testExtcaseTracker() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'ExtcaseTracker', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllCaseTrackerObjectCount
    * @todo   Implement testgetAllCaseTrackerObjectCount().
    */
    public function testgetAllCaseTrackerObjectCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllCaseTrackerObjectCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtCaseTrackerObjectsCriteria
    * @todo   Implement testgetExtCaseTrackerObjectsCriteria().
    */
    public function testgetExtCaseTrackerObjectsCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtCaseTrackerObjectsCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAvailableExtCaseTrackerObjects
    * @todo   Implement testgetAvailableExtCaseTrackerObjects().
    */
    public function testgetAvailableExtCaseTrackerObjects() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAvailableExtCaseTrackerObjects', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllReportTableCount
    * @todo   Implement testgetAllReportTableCount().
    */
    public function testgetAllReportTableCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllReportTableCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtReportTables
    * @todo   Implement testgetExtReportTables().
    */
    public function testgetExtReportTables() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtReportTables', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtAvailableUsersList
    * @todo   Implement testgetExtAvailableUsersList().
    */
    public function testgetExtAvailableUsersList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtAvailableUsersList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtTaskUsersAdHocCriteria
    * @todo   Implement testgetExtTaskUsersAdHocCriteria().
    */
    public function testgetExtTaskUsersAdHocCriteria() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtTaskUsersAdHocCriteria', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::editExtObjectPermission
    * @todo   Implement testeditExtObjectPermission().
    */
    public function testeditExtObjectPermission() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'editExtObjectPermission', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtusersadhoc
    * @todo   Implement testgetExtusersadhoc().
    */
    public function testgetExtusersadhoc() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtusersadhoc', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveExtddEvents
    * @todo   Implement testsaveExtddEvents().
    */
    public function testsaveExtddEvents() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveExtddEvents', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::saveExtEvents
    * @todo   Implement testsaveExtEvents().
    */
    public function testsaveExtEvents() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'saveExtEvents', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllTriggersCount
    * @todo   Implement testgetAllTriggersCount().
    */
    public function testgetAllTriggersCount() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllTriggersCount', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getExtTriggersList
    * @todo   Implement testgetExtTriggersList().
    */
    public function testgetExtTriggersList() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getExtTriggersList', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

    /**
    * @covers processMap::getAllInputDocsByTask
    * @todo   Implement testgetAllInputDocsByTask().
    */
    public function testgetAllInputDocsByTask() 
    { 
        if (class_exists('processMap')) {
             $methods = get_class_methods( 'processMap');
            $this->assertTrue( in_array( 'getAllInputDocsByTask', $methods ), 'seems like this function is outside this class' ); 
        } 
    } 

  } 
